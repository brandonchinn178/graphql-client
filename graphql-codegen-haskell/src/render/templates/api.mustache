{- This file was automatically generated and should not be edited. -}

{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -w #-}

module {{apiModule}} where

import Data.Aeson
import Data.Aeson.TH
import Data.GraphQL
import Data.GraphQL.Bootstrap

import {{scalarsModule}}
{{#enumModules}}
import {{.}}
{{/enumModules}}

{{#operations}}
{-----------------------------------------------------------------------------
-- {{name}}

-- result :: Object {{schemaType}}; throws a GraphQL exception on errors
result <- runQuery {{queryName}}
  {{#overArgs}}
  { _{{arg}} = ...
  {{/overArgs}}
  }

-- result :: GraphQLResult (Object {{schemaType}})
result <- runQuerySafe {{queryName}}
  {{#overArgs}}
  { _{{arg}} = ...
  {{/overArgs}}
  }
-----------------------------------------------------------------------------}

data {{queryName}} = {{queryName}}
  {{#overArgs}}
  { _{{arg}} :: {{type}}
  {{/overArgs}}
  }
  deriving (Show)

$(deriveJSON defaultOptions {fieldLabelModifier = drop 1} ''{{queryName}})

type {{schemaType}} = [schema|
  {{schema}}
|]

instance GraphQLQuery {{queryName}} where
  type ResultSchema {{queryName}} = {{schemaType}}

  getQueryName _ = "{{name}}"

  getQueryText _ = [query|
    {{queryText}}
  |]

  getArgs {{queryName}}{{argsRecordSyntax}} = toJSON {{queryName}}{{argsRecordSyntax}}

{{/operations}}
